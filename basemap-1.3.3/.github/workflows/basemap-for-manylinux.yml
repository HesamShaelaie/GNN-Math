name: basemap-for-manylinux

env:
  PKGDIR: "packages/basemap"

on:
  push:
    paths:
      - ".github/workflows/basemap-for-manylinux.yml"
      - "packages/basemap/**"
  pull_request:
    paths:
      - ".github/workflows/basemap-for-manylinux.yml"
      - "packages/basemap/**"
  workflow_dispatch:

jobs:

  checkout:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Upload checkout
        uses: actions/upload-artifact@v1
        with:
          name: checkout
          path: .

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
      max-parallel: 3
      fail-fast: false
    needs: checkout
    container: "pylegacy/python:${{ matrix.python-version }}-debian-8"
    steps:
      -
        name: Download checkout
        uses: actions/download-artifact@v1
        with:
          name: checkout
          path: .
      -
        name: Install lint requirements
        run: |
          cd ${{ env.PKGDIR }}
          pip install -r requirements-lint.txt
      -
        name: Install library requirements
        run: |
          cd ${{ env.PKGDIR }}
          pip install --prefer-binary -r requirements.txt
      -
        name: Run Flake8
        run: |
          cd ${{ env.PKGDIR }}
          if [ -x "$(command -v flake8)" ]; then
              flake8 src/mpl_toolkits/basemap/cm.py;
          fi
      -
        name: Run PyLint
        run: |
          cd ${{ env.PKGDIR }}
          if [ -x "$(command -v pylint)" ]; then
              pylint src/mpl_toolkits/basemap/cm.py;
          fi

  build-geos:
    strategy:
      matrix:
        arch:
          ["x64", "x86"]
      max-parallel: 2
      fail-fast: false
    needs: lint
    runs-on: ubuntu-latest
    container: "pylegacy/${{ matrix.arch }}-python:3.6-debian-4"
    steps:
      -
        name: Download checkout
        uses: actions/download-artifact@v1
        with:
          name: checkout
          path: .
      -
        name: Install CMake 3.6.2
        run: |
          apt-get update
          apt-get install -y libidn11
          pkgvers=3.6.2
          pkgname=cmake
          pkgcode=cmake-${pkgvers}
          case "${{ matrix.arch }}" in
              x86)  pkgfile=${pkgcode}-Linux-i386.tar.gz;;
              *)    pkgfile=${pkgcode}-Linux-x86_64.tar.gz;;
          esac
          wget https://github.com/Kitware/CMake/releases/download/v${pkgvers}/${pkgfile} -P /tmp
          tar -xf /tmp/${pkgfile} --strip-components=1 -C /usr
          rm -rf /tmp/${pkgfile}
      -
        name: Install GCC toolchain
        run: |
          apt-get update
          apt-get install -y gcc g++ make
      -
        name: Build GEOS from source
        run: |
          cd ${{ env.PKGDIR }}
          python -c "import utils; utils.GeosLibrary('3.5.1').build('extern', njobs=16)"
      -
        name: Upload GEOS artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-geos-${{ matrix.arch }}
          path: ${{ env.PKGDIR }}/extern

  build:
    strategy:
      matrix:
        arch:
          ["x64", "x86"]
        python-version:
          ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
      max-parallel: 3
      fail-fast: false
    needs: build-geos
    runs-on: ubuntu-latest
    container: "pylegacy/${{ matrix.arch }}-python:${{ matrix.python-version }}-debian-4"
    steps:
      -
        name: Download checkout
        uses: actions/download-artifact@v1
        with:
          name: checkout
          path: .
      -
        name: Download GEOS artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-geos-${{ matrix.arch }}
          path: ${{ env.PKGDIR }}/extern
      -
        name: Install GCC toolchain
        run: |
          apt-get update
          apt-get install -y gcc g++ make
      -
        name: Build old numpy from source
        run: |
          case "${{ matrix.python-version }}" in
              2.6|3.[23])      pkgvers=1.11.3;;
              2.7|3.[456789])  pkgvers=1.16.6;;
              *)               pkgvers=1.21.4;;
          esac
          pip install "numpy == ${pkgvers}"
      -
        name: Build wheel
        run: |
          sitepkgdir=$(pip show numpy 2>/dev/null | grep Location: | cut -d' ' -f2)
          export GEOS_DIR="${GITHUB_WORKSPACE}/${{ env.PKGDIR }}/extern"
          export NUMPY_INCLUDE_PATH=${sitepkgdir}/numpy/core/include
          cd ${{ env.PKGDIR }}
          python setup.py sdist
          pip wheel -w dist --no-deps dist/*.zip
      -
        name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist

  repair:
    strategy:
      matrix:
        arch:
          ["x64", "x86"]
        python-version:
          ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
      max-parallel: 3
      fail-fast: false
    needs: build
    runs-on: ubuntu-latest
    container: "pylegacy/${{ matrix.arch }}-python:3.6-debian-8"
    steps:
      -
        name: Download GEOS artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-geos-${{ matrix.arch }}
          path: ${{ env.PKGDIR }}/extern
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Install unzip
        run: |
          apt-get update
          apt-get install -y unzip
      -
        name: Install patchelf
        run: |
          pip install patchelf
          alias patchelf="python -m patchelf"
      -
        name: Install auditwheel
        run: |
          pip install "auditwheel < 4.0"
      -
        name: Repair wheel
        run: |
          cd ${{ env.PKGDIR }}
          export LD_LIBRARY_PATH="$(readlink -f extern/lib)"
          auditwheel repair -w dist dist/*.whl
      -
        name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist

  test:
    strategy:
      matrix:
        arch:
          ["x64", "x86"]
        python-version:
          ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
      max-parallel: 3
      fail-fast: false
    needs: repair
    runs-on: ubuntu-latest
    container: "pylegacy/${{ matrix.arch }}-python:${{ matrix.python-version }}-debian-8"
    steps:
      -
        name: Download checkout
        uses: actions/download-artifact@v1
        with:
          name: checkout
          path: .
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Install matplotlib dependencies
        run: |
          apt-get update
          apt-get install -y gcc g++ make
          apt-get install -y pkg-config libfreetype6-dev libpng12-dev
        if: matrix.arch == 'x86' && matrix.python-version == '3.5'
      -
        name: Install numpy from source
        run: |
          apt-get update
          apt-get install -y gcc g++ make
          pip install "numpy < 1.21.5"
        if: matrix.arch == 'x86' && matrix.python-version == '3.10'
      -
        name: Install package
        run: |
          pip install --prefer-binary ${{ env.PKGDIR }}/dist/*-manylinux1*.whl
      -
        name: Test package
        run: |
          python -c "from mpl_toolkits.basemap import Basemap"
          python -c "from mpl_toolkits.basemap import cm"

  upload:
    strategy:
      matrix:
        arch:
          ["x64", "x86"]
        python-version:
          ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
      max-parallel: 1
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    container: "pylegacy/${{ matrix.arch }}-python:${{ matrix.python-version }}-debian-8"
    environment: PyPI
    steps:
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Install requirements
        run: |
          pip install --prefer-binary twine
      -
        name: Upload distributables
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: "${{ secrets.PYPI_TOKEN }}"
          TWINE_REPOSITORY_URL: "${{ secrets.PYPI_REPOSITORY_URL }}"
        run: |
          python -m twine check                                               \
              ${{ env.PKGDIR }}/dist/*.zip                                    \
              ${{ env.PKGDIR }}/dist/*-manylinux1*.whl
          python -m twine upload --skip-existing                              \
              ${{ env.PKGDIR }}/dist/*.zip                                    \
              ${{ env.PKGDIR }}/dist/*-manylinux1*.whl
